/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDeckResponseDto } from './UserDeckResponseDto';
import {
    UserDeckResponseDtoFromJSON,
    UserDeckResponseDtoFromJSONTyped,
    UserDeckResponseDtoToJSON,
    UserDeckResponseDtoToJSONTyped,
} from './UserDeckResponseDto';

/**
 * 
 * @export
 * @interface DeckResponseDto
 */
export interface DeckResponseDto {
    /**
     * Unique identifier of the deck
     * @type {number}
     * @memberof DeckResponseDto
     */
    id: number;
    /**
     * Name of the deck
     * @type {string}
     * @memberof DeckResponseDto
     */
    name: string;
    /**
     * Description of the deck
     * @type {string}
     * @memberof DeckResponseDto
     */
    description?: string;
    /**
     * Whether the deck is public or private
     * @type {boolean}
     * @memberof DeckResponseDto
     */
    isPublic: boolean;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof DeckResponseDto
     */
    createdAt: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof DeckResponseDto
     */
    updatedAt: Date;
    /**
     * ID of the parent deck if this is a subdeck
     * @type {number}
     * @memberof DeckResponseDto
     */
    parentDeckId?: number;
    /**
     * User-deck relationships
     * @type {Array<UserDeckResponseDto>}
     * @memberof DeckResponseDto
     */
    userDecks?: Array<UserDeckResponseDto>;
    /**
     * Subdecks of this deck
     * @type {Array<DeckResponseDto>}
     * @memberof DeckResponseDto
     */
    subDecks?: Array<DeckResponseDto>;
    /**
     * Parent deck information
     * @type {DeckResponseDto}
     * @memberof DeckResponseDto
     */
    parentDeck?: DeckResponseDto;
}

/**
 * Check if a given object implements the DeckResponseDto interface.
 */
export function instanceOfDeckResponseDto(value: object): value is DeckResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isPublic' in value) || value['isPublic'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function DeckResponseDtoFromJSON(json: any): DeckResponseDto {
    return DeckResponseDtoFromJSONTyped(json, false);
}

export function DeckResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeckResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'isPublic': json['isPublic'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'parentDeckId': json['parentDeckId'] == null ? undefined : json['parentDeckId'],
        'userDecks': json['userDecks'] == null ? undefined : ((json['userDecks'] as Array<any>).map(UserDeckResponseDtoFromJSON)),
        'subDecks': json['subDecks'] == null ? undefined : ((json['subDecks'] as Array<any>).map(DeckResponseDtoFromJSON)),
        'parentDeck': json['parentDeck'] == null ? undefined : DeckResponseDtoFromJSON(json['parentDeck']),
    };
}

export function DeckResponseDtoToJSON(json: any): DeckResponseDto {
    return DeckResponseDtoToJSONTyped(json, false);
}

export function DeckResponseDtoToJSONTyped(value?: DeckResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'isPublic': value['isPublic'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'parentDeckId': value['parentDeckId'],
        'userDecks': value['userDecks'] == null ? undefined : ((value['userDecks'] as Array<any>).map(UserDeckResponseDtoToJSON)),
        'subDecks': value['subDecks'] == null ? undefined : ((value['subDecks'] as Array<any>).map(DeckResponseDtoToJSON)),
        'parentDeck': DeckResponseDtoToJSON(value['parentDeck']),
    };
}

