/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserDeckResponseDtoUser } from './UserDeckResponseDtoUser';
import {
    UserDeckResponseDtoUserFromJSON,
    UserDeckResponseDtoUserFromJSONTyped,
    UserDeckResponseDtoUserToJSON,
    UserDeckResponseDtoUserToJSONTyped,
} from './UserDeckResponseDtoUser';

/**
 * 
 * @export
 * @interface UserDeckResponseDto
 */
export interface UserDeckResponseDto {
    /**
     * Unique identifier of the user-deck relationship
     * @type {number}
     * @memberof UserDeckResponseDto
     */
    id: number;
    /**
     * User ID
     * @type {number}
     * @memberof UserDeckResponseDto
     */
    userId: number;
    /**
     * Deck ID
     * @type {number}
     * @memberof UserDeckResponseDto
     */
    deckId: number;
    /**
     * Role of the user in the deck
     * @type {string}
     * @memberof UserDeckResponseDto
     */
    role: UserDeckResponseDtoRoleEnum;
    /**
     * 
     * @type {UserDeckResponseDtoUser}
     * @memberof UserDeckResponseDto
     */
    user?: UserDeckResponseDtoUser;
}


/**
 * @export
 */
export const UserDeckResponseDtoRoleEnum = {
    Admin: 'admin',
    Member: 'member'
} as const;
export type UserDeckResponseDtoRoleEnum = typeof UserDeckResponseDtoRoleEnum[keyof typeof UserDeckResponseDtoRoleEnum];


/**
 * Check if a given object implements the UserDeckResponseDto interface.
 */
export function instanceOfUserDeckResponseDto(value: object): value is UserDeckResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('deckId' in value) || value['deckId'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    return true;
}

export function UserDeckResponseDtoFromJSON(json: any): UserDeckResponseDto {
    return UserDeckResponseDtoFromJSONTyped(json, false);
}

export function UserDeckResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserDeckResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['userId'],
        'deckId': json['deckId'],
        'role': json['role'],
        'user': json['user'] == null ? undefined : UserDeckResponseDtoUserFromJSON(json['user']),
    };
}

export function UserDeckResponseDtoToJSON(json: any): UserDeckResponseDto {
    return UserDeckResponseDtoToJSONTyped(json, false);
}

export function UserDeckResponseDtoToJSONTyped(value?: UserDeckResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'userId': value['userId'],
        'deckId': value['deckId'],
        'role': value['role'],
        'user': UserDeckResponseDtoUserToJSON(value['user']),
    };
}

