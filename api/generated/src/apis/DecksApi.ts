/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddUserToDeckDto,
  ConflictErrorResponseDto,
  CreateDeckDto,
  DeckResponseDto,
  ForbiddenErrorResponseDto,
  LeaveDeckResponseDto,
  NotFoundErrorResponseDto,
  UnauthorizedErrorResponseDto,
  ValidationErrorResponseDto,
} from '../models/index';
import {
    AddUserToDeckDtoFromJSON,
    AddUserToDeckDtoToJSON,
    ConflictErrorResponseDtoFromJSON,
    ConflictErrorResponseDtoToJSON,
    CreateDeckDtoFromJSON,
    CreateDeckDtoToJSON,
    DeckResponseDtoFromJSON,
    DeckResponseDtoToJSON,
    ForbiddenErrorResponseDtoFromJSON,
    ForbiddenErrorResponseDtoToJSON,
    LeaveDeckResponseDtoFromJSON,
    LeaveDeckResponseDtoToJSON,
    NotFoundErrorResponseDtoFromJSON,
    NotFoundErrorResponseDtoToJSON,
    UnauthorizedErrorResponseDtoFromJSON,
    UnauthorizedErrorResponseDtoToJSON,
    ValidationErrorResponseDtoFromJSON,
    ValidationErrorResponseDtoToJSON,
} from '../models/index';

export interface DeckControllerAddUserToDeckRequest {
    id: number;
    addUserToDeckDto: AddUserToDeckDto;
}

export interface DeckControllerCreateDeckRequest {
    createDeckDto: CreateDeckDto;
}

export interface DeckControllerDeleteDeckRequest {
    id: number;
}

export interface DeckControllerGetDeckByIdRequest {
    id: number;
}

export interface DeckControllerLeaveDeckRequest {
    id: number;
}

export interface DeckControllerRemoveUserFromDeckRequest {
    id: number;
    userId: number;
}

/**
 * DecksApi - interface
 * 
 * @export
 * @interface DecksApiInterface
 */
export interface DecksApiInterface {
    /**
     * Adds an existing user to a deck with a specified role. Requires admin permissions on the deck.
     * @summary Add a user to a deck
     * @param {number} id Unique identifier of the deck
     * @param {AddUserToDeckDto} addUserToDeckDto User addition data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerAddUserToDeckRaw(requestParameters: DeckControllerAddUserToDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Adds an existing user to a deck with a specified role. Requires admin permissions on the deck.
     * Add a user to a deck
     */
    deckControllerAddUserToDeck(requestParameters: DeckControllerAddUserToDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Creates a new deck with the authenticated user as the admin. Optionally can be created as a subdeck of an existing deck.
     * @summary Create a new deck
     * @param {CreateDeckDto} createDeckDto Deck creation data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerCreateDeckRaw(requestParameters: DeckControllerCreateDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeckResponseDto>>;

    /**
     * Creates a new deck with the authenticated user as the admin. Optionally can be created as a subdeck of an existing deck.
     * Create a new deck
     */
    deckControllerCreateDeck(requestParameters: DeckControllerCreateDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeckResponseDto>;

    /**
     * Deletes a deck and all its child decks recursively. Requires admin permissions on the deck. This action cannot be undone.
     * @summary Delete a deck
     * @param {number} id Unique identifier of the deck to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerDeleteDeckRaw(requestParameters: DeckControllerDeleteDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a deck and all its child decks recursively. Requires admin permissions on the deck. This action cannot be undone.
     * Delete a deck
     */
    deckControllerDeleteDeck(requestParameters: DeckControllerDeleteDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * Retrieves a specific deck by its ID. The user must have access to the deck.
     * @summary Get a specific deck by ID
     * @param {number} id Unique identifier of the deck
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerGetDeckByIdRaw(requestParameters: DeckControllerGetDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeckResponseDto>>;

    /**
     * Retrieves a specific deck by its ID. The user must have access to the deck.
     * Get a specific deck by ID
     */
    deckControllerGetDeckById(requestParameters: DeckControllerGetDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeckResponseDto>;

    /**
     * Retrieves all decks that the authenticated user has access to, including their role in each deck and associated users.
     * @summary Get all decks for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerGetUserDecksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeckResponseDto>>>;

    /**
     * Retrieves all decks that the authenticated user has access to, including their role in each deck and associated users.
     * Get all decks for the current user
     */
    deckControllerGetUserDecks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeckResponseDto>>;

    /**
     * Removes the authenticated user from the deck. If the user is the last admin, promotes another user to admin. If no users remain, deletes the deck.
     * @summary Leave a deck
     * @param {number} id ID of the deck to leave
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerLeaveDeckRaw(requestParameters: DeckControllerLeaveDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaveDeckResponseDto>>;

    /**
     * Removes the authenticated user from the deck. If the user is the last admin, promotes another user to admin. If no users remain, deletes the deck.
     * Leave a deck
     */
    deckControllerLeaveDeck(requestParameters: DeckControllerLeaveDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaveDeckResponseDto>;

    /**
     * Removes a user from a deck. Requires admin permissions. Admins can remove any user.
     * @summary Remove a user from a deck
     * @param {number} id Unique identifier of the deck
     * @param {number} userId Unique identifier of the user to remove
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DecksApiInterface
     */
    deckControllerRemoveUserFromDeckRaw(requestParameters: DeckControllerRemoveUserFromDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Removes a user from a deck. Requires admin permissions. Admins can remove any user.
     * Remove a user from a deck
     */
    deckControllerRemoveUserFromDeck(requestParameters: DeckControllerRemoveUserFromDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class DecksApi extends runtime.BaseAPI implements DecksApiInterface {

    /**
     * Adds an existing user to a deck with a specified role. Requires admin permissions on the deck.
     * Add a user to a deck
     */
    async deckControllerAddUserToDeckRaw(requestParameters: DeckControllerAddUserToDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deckControllerAddUserToDeck().'
            );
        }

        if (requestParameters['addUserToDeckDto'] == null) {
            throw new runtime.RequiredError(
                'addUserToDeckDto',
                'Required parameter "addUserToDeckDto" was null or undefined when calling deckControllerAddUserToDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks/{id}/users`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddUserToDeckDtoToJSON(requestParameters['addUserToDeckDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds an existing user to a deck with a specified role. Requires admin permissions on the deck.
     * Add a user to a deck
     */
    async deckControllerAddUserToDeck(requestParameters: DeckControllerAddUserToDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deckControllerAddUserToDeckRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new deck with the authenticated user as the admin. Optionally can be created as a subdeck of an existing deck.
     * Create a new deck
     */
    async deckControllerCreateDeckRaw(requestParameters: DeckControllerCreateDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeckResponseDto>> {
        if (requestParameters['createDeckDto'] == null) {
            throw new runtime.RequiredError(
                'createDeckDto',
                'Required parameter "createDeckDto" was null or undefined when calling deckControllerCreateDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDeckDtoToJSON(requestParameters['createDeckDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeckResponseDtoFromJSON(jsonValue));
    }

    /**
     * Creates a new deck with the authenticated user as the admin. Optionally can be created as a subdeck of an existing deck.
     * Create a new deck
     */
    async deckControllerCreateDeck(requestParameters: DeckControllerCreateDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeckResponseDto> {
        const response = await this.deckControllerCreateDeckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a deck and all its child decks recursively. Requires admin permissions on the deck. This action cannot be undone.
     * Delete a deck
     */
    async deckControllerDeleteDeckRaw(requestParameters: DeckControllerDeleteDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deckControllerDeleteDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a deck and all its child decks recursively. Requires admin permissions on the deck. This action cannot be undone.
     * Delete a deck
     */
    async deckControllerDeleteDeck(requestParameters: DeckControllerDeleteDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deckControllerDeleteDeckRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieves a specific deck by its ID. The user must have access to the deck.
     * Get a specific deck by ID
     */
    async deckControllerGetDeckByIdRaw(requestParameters: DeckControllerGetDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeckResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deckControllerGetDeckById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeckResponseDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a specific deck by its ID. The user must have access to the deck.
     * Get a specific deck by ID
     */
    async deckControllerGetDeckById(requestParameters: DeckControllerGetDeckByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeckResponseDto> {
        const response = await this.deckControllerGetDeckByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieves all decks that the authenticated user has access to, including their role in each deck and associated users.
     * Get all decks for the current user
     */
    async deckControllerGetUserDecksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DeckResponseDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DeckResponseDtoFromJSON));
    }

    /**
     * Retrieves all decks that the authenticated user has access to, including their role in each deck and associated users.
     * Get all decks for the current user
     */
    async deckControllerGetUserDecks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DeckResponseDto>> {
        const response = await this.deckControllerGetUserDecksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Removes the authenticated user from the deck. If the user is the last admin, promotes another user to admin. If no users remain, deletes the deck.
     * Leave a deck
     */
    async deckControllerLeaveDeckRaw(requestParameters: DeckControllerLeaveDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeaveDeckResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deckControllerLeaveDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks/{id}/leave`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaveDeckResponseDtoFromJSON(jsonValue));
    }

    /**
     * Removes the authenticated user from the deck. If the user is the last admin, promotes another user to admin. If no users remain, deletes the deck.
     * Leave a deck
     */
    async deckControllerLeaveDeck(requestParameters: DeckControllerLeaveDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeaveDeckResponseDto> {
        const response = await this.deckControllerLeaveDeckRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Removes a user from a deck. Requires admin permissions. Admins can remove any user.
     * Remove a user from a deck
     */
    async deckControllerRemoveUserFromDeckRaw(requestParameters: DeckControllerRemoveUserFromDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deckControllerRemoveUserFromDeck().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deckControllerRemoveUserFromDeck().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/decks/{id}/users/{userId}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        urlPath = urlPath.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Removes a user from a deck. Requires admin permissions. Admins can remove any user.
     * Remove a user from a deck
     */
    async deckControllerRemoveUserFromDeck(requestParameters: DeckControllerRemoveUserFromDeckRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deckControllerRemoveUserFromDeckRaw(requestParameters, initOverrides);
    }

}
