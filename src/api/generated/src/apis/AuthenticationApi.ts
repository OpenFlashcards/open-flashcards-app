/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthControllerGetProfile200Response,
  AuthControllerVerifyToken201Response,
  AuthErrorDto,
  AuthResponseDto,
  LoginDto,
} from '../models/index';
import {
    AuthControllerGetProfile200ResponseFromJSON,
    AuthControllerGetProfile200ResponseToJSON,
    AuthControllerVerifyToken201ResponseFromJSON,
    AuthControllerVerifyToken201ResponseToJSON,
    AuthErrorDtoFromJSON,
    AuthErrorDtoToJSON,
    AuthResponseDtoFromJSON,
    AuthResponseDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
} from '../models/index';

export interface AuthControllerLoginRequest {
    loginDto: LoginDto;
}

/**
 * AuthenticationApi - interface
 * 
 * @export
 * @interface AuthenticationApiInterface
 */
export interface AuthenticationApiInterface {
    /**
     * Get the profile information of the currently authenticated user
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authControllerGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerGetProfile200Response>>;

    /**
     * Get the profile information of the currently authenticated user
     * Get user profile
     */
    authControllerGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerGetProfile200Response>;

    /**
     * Authenticate user with email and password and return JWT token
     * @summary User login
     * @param {LoginDto} loginDto User login credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>>;

    /**
     * Authenticate user with email and password and return JWT token
     * User login
     */
    authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto>;

    /**
     * Verify if the provided JWT token is valid and return user information
     * @summary Verify JWT token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthenticationApiInterface
     */
    authControllerVerifyTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerVerifyToken201Response>>;

    /**
     * Verify if the provided JWT token is valid and return user information
     * Verify JWT token
     */
    authControllerVerifyToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerVerifyToken201Response>;

}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI implements AuthenticationApiInterface {

    /**
     * Get the profile information of the currently authenticated user
     * Get user profile
     */
    async authControllerGetProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerGetProfile200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/profile`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerGetProfile200ResponseFromJSON(jsonValue));
    }

    /**
     * Get the profile information of the currently authenticated user
     * Get user profile
     */
    async authControllerGetProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerGetProfile200Response> {
        const response = await this.authControllerGetProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate user with email and password and return JWT token
     * User login
     */
    async authControllerLoginRaw(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling authControllerLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     * Authenticate user with email and password and return JWT token
     * User login
     */
    async authControllerLogin(requestParameters: AuthControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.authControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify if the provided JWT token is valid and return user information
     * Verify JWT token
     */
    async authControllerVerifyTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthControllerVerifyToken201Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT-auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/auth/verify`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthControllerVerifyToken201ResponseFromJSON(jsonValue));
    }

    /**
     * Verify if the provided JWT token is valid and return user information
     * Verify JWT token
     */
    async authControllerVerifyToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthControllerVerifyToken201Response> {
        const response = await this.authControllerVerifyTokenRaw(initOverrides);
        return await response.value();
    }

}
