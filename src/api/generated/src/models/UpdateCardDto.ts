/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateCardDto
 */
export interface UpdateCardDto {
    /**
     * The question text for the flashcard
     * @type {string}
     * @memberof UpdateCardDto
     */
    question?: string;
    /**
     * The answer text for the flashcard
     * @type {string}
     * @memberof UpdateCardDto
     */
    answer?: string;
    /**
     * Additional notes or explanation for the card (optional)
     * @type {string}
     * @memberof UpdateCardDto
     */
    notes?: string;
    /**
     * The ID of the deck to move this card to (optional)
     * @type {number}
     * @memberof UpdateCardDto
     */
    deckId?: number;
}

/**
 * Check if a given object implements the UpdateCardDto interface.
 */
export function instanceOfUpdateCardDto(value: object): value is UpdateCardDto {
    return true;
}

export function UpdateCardDtoFromJSON(json: any): UpdateCardDto {
    return UpdateCardDtoFromJSONTyped(json, false);
}

export function UpdateCardDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateCardDto {
    if (json == null) {
        return json;
    }
    return {
        
        'question': json['question'] == null ? undefined : json['question'],
        'answer': json['answer'] == null ? undefined : json['answer'],
        'notes': json['notes'] == null ? undefined : json['notes'],
        'deckId': json['deckId'] == null ? undefined : json['deckId'],
    };
}

export function UpdateCardDtoToJSON(json: any): UpdateCardDto {
    return UpdateCardDtoToJSONTyped(json, false);
}

export function UpdateCardDtoToJSONTyped(value?: UpdateCardDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'question': value['question'],
        'answer': value['answer'],
        'notes': value['notes'],
        'deckId': value['deckId'],
    };
}

