/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CardResponseDto
 */
export interface CardResponseDto {
    /**
     * Unique identifier for the card
     * @type {number}
     * @memberof CardResponseDto
     */
    id: number;
    /**
     * The question text for the flashcard
     * @type {string}
     * @memberof CardResponseDto
     */
    question: string;
    /**
     * The answer text for the flashcard
     * @type {string}
     * @memberof CardResponseDto
     */
    answer: string;
    /**
     * ID of the deck this card belongs to
     * @type {number}
     * @memberof CardResponseDto
     */
    deckId: number;
    /**
     * ID of the user who created this card
     * @type {number}
     * @memberof CardResponseDto
     */
    createdById: number | null;
    /**
     * Name of the user who created this card
     * @type {string}
     * @memberof CardResponseDto
     */
    createdByName: string | null;
    /**
     * Timestamp when the card was created
     * @type {Date}
     * @memberof CardResponseDto
     */
    createdAt: Date;
    /**
     * Timestamp when the card was last updated
     * @type {Date}
     * @memberof CardResponseDto
     */
    updatedAt: Date;
    /**
     * Additional notes or explanation for the card
     * @type {string}
     * @memberof CardResponseDto
     */
    notes: string | null;
}

/**
 * Check if a given object implements the CardResponseDto interface.
 */
export function instanceOfCardResponseDto(value: object): value is CardResponseDto {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('question' in value) || value['question'] === undefined) return false;
    if (!('answer' in value) || value['answer'] === undefined) return false;
    if (!('deckId' in value) || value['deckId'] === undefined) return false;
    if (!('createdById' in value) || value['createdById'] === undefined) return false;
    if (!('createdByName' in value) || value['createdByName'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('notes' in value) || value['notes'] === undefined) return false;
    return true;
}

export function CardResponseDtoFromJSON(json: any): CardResponseDto {
    return CardResponseDtoFromJSONTyped(json, false);
}

export function CardResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'question': json['question'],
        'answer': json['answer'],
        'deckId': json['deckId'],
        'createdById': json['createdById'],
        'createdByName': json['createdByName'],
        'createdAt': (new Date(json['createdAt'])),
        'updatedAt': (new Date(json['updatedAt'])),
        'notes': json['notes'],
    };
}

export function CardResponseDtoToJSON(json: any): CardResponseDto {
    return CardResponseDtoToJSONTyped(json, false);
}

export function CardResponseDtoToJSONTyped(value?: CardResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'question': value['question'],
        'answer': value['answer'],
        'deckId': value['deckId'],
        'createdById': value['createdById'],
        'createdByName': value['createdByName'],
        'createdAt': ((value['createdAt']).toISOString()),
        'updatedAt': ((value['updatedAt']).toISOString()),
        'notes': value['notes'],
    };
}

