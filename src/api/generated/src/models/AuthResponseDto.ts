/* tslint:disable */
/* eslint-disable */
/**
 * Open Flashcards API
 * Open Flashcards API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthResponseDtoUser } from './AuthResponseDtoUser';
import {
    AuthResponseDtoUserFromJSON,
    AuthResponseDtoUserFromJSONTyped,
    AuthResponseDtoUserToJSON,
    AuthResponseDtoUserToJSONTyped,
} from './AuthResponseDtoUser';

/**
 * 
 * @export
 * @interface AuthResponseDto
 */
export interface AuthResponseDto {
    /**
     * JWT access token
     * @type {string}
     * @memberof AuthResponseDto
     */
    accessToken: string;
    /**
     * Token type
     * @type {string}
     * @memberof AuthResponseDto
     */
    tokenType: AuthResponseDtoTokenTypeEnum;
    /**
     * Token expiration time in seconds
     * @type {number}
     * @memberof AuthResponseDto
     */
    expiresIn: number;
    /**
     * 
     * @type {AuthResponseDtoUser}
     * @memberof AuthResponseDto
     */
    user: AuthResponseDtoUser;
}


/**
 * @export
 */
export const AuthResponseDtoTokenTypeEnum = {
    Bearer: 'Bearer'
} as const;
export type AuthResponseDtoTokenTypeEnum = typeof AuthResponseDtoTokenTypeEnum[keyof typeof AuthResponseDtoTokenTypeEnum];


/**
 * Check if a given object implements the AuthResponseDto interface.
 */
export function instanceOfAuthResponseDto(value: object): value is AuthResponseDto {
    if (!('accessToken' in value) || value['accessToken'] === undefined) return false;
    if (!('tokenType' in value) || value['tokenType'] === undefined) return false;
    if (!('expiresIn' in value) || value['expiresIn'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    return true;
}

export function AuthResponseDtoFromJSON(json: any): AuthResponseDto {
    return AuthResponseDtoFromJSONTyped(json, false);
}

export function AuthResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'accessToken': json['access_token'],
        'tokenType': json['token_type'],
        'expiresIn': json['expires_in'],
        'user': AuthResponseDtoUserFromJSON(json['user']),
    };
}

export function AuthResponseDtoToJSON(json: any): AuthResponseDto {
    return AuthResponseDtoToJSONTyped(json, false);
}

export function AuthResponseDtoToJSONTyped(value?: AuthResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'access_token': value['accessToken'],
        'token_type': value['tokenType'],
        'expires_in': value['expiresIn'],
        'user': AuthResponseDtoUserToJSON(value['user']),
    };
}

